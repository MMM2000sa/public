// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.1/contracts/token/ERC20/ERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.1/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.1/contracts/token/ERC20/IERC20.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.1/contracts/access/Ownable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.1/contracts/utils/Pausable.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v5.0.1/contracts/utils/ReentrancyGuard.sol";

interface ISwapRouter {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;

    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external returns (uint, uint, uint);
}

contract MFToken is ERC20, ERC20Burnable, Ownable, Pausable, ReentrancyGuard {
    uint256 public constant INITIAL_SUPPLY = 5_000_000 * 10 ** 18;
    uint256 public constant FEE_BASIS_POINTS = 300; // 3%
    uint256 private constant FEE_DENOMINATOR = 10_000;

    uint256 public liquidityThreshold = 2_000 * 10 ** 18;
    address public immutable pairToken;
    ISwapRouter public immutable router;

    constructor(address _router, address _pairToken)
        ERC20("MF Token", "MF")
    {
        require(_router != address(0), "Invalid router");
        require(_pairToken != address(0), "Invalid pair token");

        _mint(msg.sender, INITIAL_SUPPLY);
        router = ISwapRouter(_router);
        pairToken = _pairToken;
    }

    function _transfer(address from, address to, uint256 amount) internal override whenNotPaused {
        if (from == address(this) || to == address(this)) {
            super._transfer(from, to, amount);
            return;
        }

        uint256 feeAmount = (amount * FEE_BASIS_POINTS) / FEE_DENOMINATOR;
        uint256 sendAmount = amount - feeAmount;

        super._transfer(from, address(this), feeAmount);
        super._transfer(from, to, sendAmount);
    }

    /// @notice Only owner can reinvest collected fees into LP
    function reinvestFees(uint minOut) external onlyOwner nonReentrant whenNotPaused {
        uint256 contractBalance = balanceOf(address(this));
        require(contractBalance
